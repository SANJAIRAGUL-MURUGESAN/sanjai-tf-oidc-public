name: Terraform Promotion Pipeline

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      destroy_env:
        description: 'Environment to destroy (dev, qa, preprod, prod)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - preprod
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  dev:
    if: github.ref_name == 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::853973692277:role/sanjai-oidc-2
          aws-region: ${{ vars.AWS_REGION_ACCOUNT_A }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.STATE_BUCKET_NAME_A }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION_ACCOUNT_A }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE_NAME_A }}" \
            -backend-config="workspace_key_prefix=${{ vars.WORKSPACE_KEY_PREFIX }}"

      - name: Select or Create Workspace
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Plan
        run: terraform plan -var-file=vars_dev.tfvars -out=tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan

      - name: Get CloudFront Distribution ID
        id: get_distribution_id
        run: |
          id=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          echo "CloudFront ID: $id"
          if [[ -n "$id" ]]; then
            echo "DISTRIBUTION_ID=$id" >> $GITHUB_ENV
          else
            echo "CloudFront distribution ID not found"
            exit 1

      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"

  qa:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::853973692277:role/sanjai-oidc-2
          aws-region: ${{ vars.AWS_REGION_ACCOUNT_A }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.STATE_BUCKET_NAME_A }}" \
            -backend-config="key=qa/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION_ACCOUNT_A }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE_NAME_A }}" \
            -backend-config="workspace_key_prefix=${{ vars.WORKSPACE_KEY_PREFIX }}"

      - name: Select or Create Workspace
        run: terraform workspace select qa || terraform workspace new qa

      - name: Terraform Plan
        run: terraform plan -var-file=vars_qa.tfvars -out=tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
      
      - name: Get CloudFront Distribution ID
        id: get_distribution_id
        shell: bash
        run: |
          set -e
          id=$("$TERRAFORM_CLI_PATH/terraform-bin" output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          echo "CloudFront ID: $id"
          if [[ -n "$id" ]]; then
            echo "DISTRIBUTION_ID=$id" >> $GITHUB_ENV
          else
            echo "CloudFront distribution ID not found"
            exit 1
          fi
            
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"


  approval_preprod:
    runs-on: ubuntu-latest
    needs: qa
    environment:
      name: prod_preprod-approval
    steps:
      - run: echo "Preprod approval granted"

  preprod:
    runs-on: ubuntu-latest
    needs: approval_preprod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::615719431409:role/sanjai-oidc
          aws-region: ${{ vars.AWS_REGION_ACCOUNT_B }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.STATE_BUCKET_NAME_B }}" \
            -backend-config="key=preprod/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION_ACCOUNT_B }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE_NAME_B }}" \
            -backend-config="workspace_key_prefix=${{ vars.WORKSPACE_KEY_PREFIX }}"

      - name: Select or Create Workspace
        run: terraform workspace select preprod || terraform workspace new preprod

      - name: Terraform Plan
        run: terraform plan -var-file=vars_preprod.tfvars -out=tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan

      - name: Get CloudFront Distribution ID
        id: get_distribution_id
        run: |
          id=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          echo "CloudFront ID: $id"
          if [[ -n "$id" ]]; then
            echo "DISTRIBUTION_ID=$id" >> $GITHUB_ENV
          else
            echo "CloudFront distribution ID not found"
            exit 1
          fi   
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"

  approval_prod:
    runs-on: ubuntu-latest
    needs: preprod
    environment:
      name: prod_preprod-approval
    steps:
      - run: echo "Prod approval granted"

  prod:
    runs-on: ubuntu-latest
    needs: approval_prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::615719431409:role/sanjai-oidc
          aws-region: ${{ vars.AWS_REGION_ACCOUNT_B }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.STATE_BUCKET_NAME_B }}" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION_ACCOUNT_B }}" \
            -backend-config="dynamodb_table=${{ vars.DYNAMODB_TABLE_NAME_B }}" \
            -backend-config="workspace_key_prefix=${{ vars.WORKSPACE_KEY_PREFIX }}"

      - name: Select or Create Workspace
        run: terraform workspace select prod || terraform workspace new prod

      - name: Terraform Plan
        run: terraform plan -var-file=vars_prod.tfvars -out=tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
  
  destroy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Set Environment-Specific Variables
        id: setvars
        run: |
          case "${{ github.event.inputs.destroy_env }}" in
            dev)
              echo "ROLE=${{ secrets.DEV_ASSUME_ROLE_ARN }}" >> $GITHUB_ENV
              echo "TFVARS=environments/dev.tfvars" >> $GITHUB_ENV
              echo "KEY=dev/terraform.tfstate" >> $GITHUB_ENV
              echo "BUCKET=${{ vars.AWS_DEV_QA_STATE_BUCKET }}" >> $GITHUB_ENV
              echo "DDB_TABLE=${{ vars.AWS_DEV_QA_LOCK_TABLE }}" >> $GITHUB_ENV
              echo "AWS_REGION=${{ vars.AWS_REGION_ACCOUNT_A }}" >> $GITHUB_ENV
              ;;
            qa)
              echo "ROLE=${{ secrets.DEV_ASSUME_ROLE_ARN }}" >> $GITHUB_ENV
              echo "TFVARS=environments/qa.tfvars" >> $GITHUB_ENV
              echo "KEY=qa/terraform.tfstate" >> $GITHUB_ENV
              echo "BUCKET=${{ vars.AWS_DEV_QA_STATE_BUCKET }}" >> $GITHUB_ENV
              echo "DDB_TABLE=${{ vars.AWS_DEV_QA_LOCK_TABLE }}" >> $GITHUB_ENV
              echo "AWS_REGION=${{ vars.AWS_REGION_ACCOUNT_A }}" >> $GITHUB_ENV
              ;;
            preprod)
              echo "ROLE=arn:aws:iam::339712902923:role/cbm-fndv2-use1-dev-oidc-role-infra-repo" >> $GITHUB_ENV
              echo "TFVARS=environments/preprod.tfvars" >> $GITHUB_ENV
              echo "KEY=preprod/terraform.tfstate" >> $GITHUB_ENV
              echo "BUCKET=${{ vars.STATE_BUCKET_NAME_B }}" >> $GITHUB_ENV
              echo "DDB_TABLE=${{ vars.DYNAMODB_TABLE_NAME_B }}" >> $GITHUB_ENV
              echo "AWS_REGION=${{ vars.AWS_REGION_ACCOUNT_B }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "ROLE=arn:aws:iam::339712902923:role/cbm-fndv2-use1-dev-oidc-role-infra-repo" >> $GITHUB_ENV
              echo "TFVARS=environments/prod.tfvars" >> $GITHUB_ENV
              echo "KEY=prod/terraform.tfstate" >> $GITHUB_ENV
              echo "BUCKET=${{ vars.STATE_BUCKET_NAME_B }}" >> $GITHUB_ENV
              echo "DDB_TABLE=${{ vars.DYNAMODB_TABLE_NAME_B }}" >> $GITHUB_ENV
              echo "AWS_REGION=${{ vars.AWS_REGION_ACCOUNT_B }}" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid environment"
              exit 1
              ;;
          esac

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::853973692277:role/sanjai-oidc-2
          aws-region: ${{ vars.AWS_REGION_ACCOUNT_A }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.BUCKET }}" \
            -backend-config="key=${{ env.KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.DDB_TABLE }}" \
            -backend-config="workspace_key_prefix=${{ vars.WORKSPACE_KEY_PREFIX }}"

      - name: Select Workspace
        run: terraform workspace select ${{ github.event.inputs.destroy_env }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file=${{ env.TFVARS }}

      - name: Delete Workspace
        run: terraform workspace delete ${{ github.event.inputs.destroy_env }} || echo "Workspace already deleted or not found"